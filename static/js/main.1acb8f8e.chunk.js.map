{"version":3,"sources":["mocks/data/questions.ts","mocks/handlers/gameHandlers.ts","helpers/randomCategories.ts","mocks/handlers/index.ts","mocks/browser.ts","assets/styles/GlobalStyles.tsx","assets/styles/Theme.tsx","hooks/useFetchQuestions.tsx","providers/ScoreProvider.tsx","providers/UsernameProvider.tsx","providers/AllProviders.tsx","reportWebVitals.ts","components/atoms/CenteringWrapper/CenteringWrapper.tsx","components/atoms/Header/Header.tsx","components/atoms/Button/Button.tsx","components/molecules/GameViewButtons/GameViewButtons.styles.tsx","components/molecules/GameViewButtons/GameViewButtons.tsx","helpers/randomNumber.ts","components/molecules/ListItem/ListItem.styles.tsx","components/molecules/ListItem/ListItem.tsx","views/GameView/GameView.styles.ts","views/GameView/GameView.tsx","views/PageNotFound/PageNotFound.styles.tsx","views/PageNotFound/PageNotFound.tsx","views/scoreView/ScoreView.tsx","components/atoms/FormWrapper/FormWrapper.tsx","components/atoms/InputTip/InputTip.tsx","components/molecules/Input/Input.styles.tsx","components/molecules/Input/Input.tsx","components/organisms/Form/Form.tsx","views/UsernameView/UsernameView.tsx","routes/Routes.tsx","components/atoms/PageWrapper/PageWrapper.tsx","templates/MainTemplate.tsx","views/Root.tsx","index.tsx"],"names":["questions","question","all_words","good_words","gameHandlers","rest","get","req","res","ctx","randomQuestionsNumber","dataArrayLength","number","Math","round","random","randomCategories","length","randomQuestions","status","json","handlers","worker","setupWorker","GlobalStyles","createGlobalStyle","theme","typography","roboto","colors","background","Theme","grey","black","blue","white","fontWeight","bold","regular","QuestionsContext","React","createContext","data","isLoading","error","fetchData","a","QuestionsProvider","children","useState","setData","setIsLoading","setError","useCallback","url","axios","response","Provider","value","useFetchQuestions","questionsContext","useContext","Error","ScoreContext","score","handleScore","wrongAnswers","goodAnswers","ScoreProvider","setScore","plusScore","minusScore","UsernameContext","username","setUsername","UsernameProvider","AllProviders","basename","process","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CenteringWrapper","styled","div","Header","h1","Button","button","StyledButton","GameViewButtons","answersChecked","checkAnswersHandler","push","useHistory","onClick","randomNumber","ListItem","li","Wrapper","randomGridColumn","randomGridRow","isGoodAnswer","isWrongAnswer","ListItemButton","isChecked","ListItemComponent","clickHandler","word","gridColumn","setGridColumn","gridRow","setGridRow","useEffect","disabled","GameWrapper","List","ul","GameView","checkedItems","setCheckedItems","setWrongAnswers","setGoodAnswers","setAnswersChecked","clickedItem","find","name","clickListItemHandler","item","isCheckedAnswer","newCheckedItems","filter","newGoodAnswers","newWrongAnswers","correctAnswer","map","StyledLink","Link","PageNotFound","to","Span","span","ScoreView","as","FormWrapper","form","InputTip","p","StyledInput","input","Input","inputHandler","placeholder","type","onChange","Form","formHandler","onSubmit","UsernameView","setValue","e","preventDefault","trim","target","Routes","exact","path","PageWrapper","MainTemplate","Root","start","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1acb8f8e.chunk.js","sourcesContent":["import { QuestionInterface } from 'types';\n\nexport const questions: QuestionInterface[] = [\n  {\n    question: 'Select Animals',\n    all_words: [\n      'hole',\n      'sofa',\n      'pear',\n      'tiger',\n      'oatmeal',\n      'square',\n      'nut',\n      'cub',\n      'shirt',\n      'tub',\n      'passenger',\n      'cow',\n    ],\n    good_words: ['tiger', 'cow'],\n  },\n  {\n    question: 'Select Colors',\n    all_words: [\n      'jeans',\n      'existence',\n      'ink',\n      'red',\n      'blue',\n      'yellow',\n      'laugh',\n      'behavior',\n      'expansion',\n      'white',\n      'black',\n      'cakes',\n    ],\n    good_words: ['red', 'blue', 'yellow', 'white', 'black'],\n  },\n  {\n    question: 'Select Vehicles',\n    all_words: [\n      'belief',\n      'wire',\n      'car',\n      'bus',\n      'star',\n      'river',\n      'hat',\n      'skirt',\n      'train',\n    ],\n    good_words: ['car', 'bus', 'train'],\n  },\n];\n","import { randomCategories } from 'helpers/randomCategories';\nimport { questions } from 'mocks/data/questions';\nimport { rest } from 'msw';\n\nexport const gameHandlers = [\n  rest.get('/questions', (req, res, ctx) => {\n    const randomQuestionsNumber = randomCategories(questions.length);\n    const randomQuestions = questions[randomQuestionsNumber];\n    return res(ctx.status(200), ctx.json(randomQuestions));\n  }),\n];\n","export const randomCategories = (dataArrayLength: number) => {\n  const number = Math.round(Math.random() * dataArrayLength - 1);\n  if (number === -1) {\n    return 0;\n  }\n  return number;\n};\n","import { gameHandlers } from './gameHandlers';\n\nexport const handlers = [...gameHandlers];\n","import { setupWorker } from 'msw';\n\nimport { handlers } from './handlers';\n\nexport const worker = setupWorker(...handlers);\n","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyles = createGlobalStyle`\n    *, *::after, *::before {\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n    }\n\n    html {\n        font-size: 62.5%;\n    }\n\n    body {\n        font-size: 1.6rem;\n        font-family: ${({ theme }) => theme.typography.roboto};\n        background-color: ${({ theme }) => theme.colors.background};\n    }\n\n    h1, h2, h3, h4, h5, h6, input, button {\n        font-family: ${({ theme }) => theme.typography.roboto};\n    }\n`;\n","export const Theme = {\n  colors: {\n    grey: '#bdbdbd',\n    black: '#212121',\n    blue: '#2196f3',\n    background: '#f5f5f5',\n    white: '#fff',\n  },\n  typography: {\n    roboto: 'Roboto',\n  },\n  fontWeight: {\n    bold: 700,\n    regular: 400,\n  },\n};\n","import axios from 'axios';\nimport React, { useCallback, useContext, useState } from 'react';\nimport { QuestionInterface, UseFetchInterface } from 'types';\n\nexport const QuestionsContext = React.createContext<UseFetchInterface>({\n  data: null,\n  isLoading: false,\n  error: null,\n  fetchData: async () => {},\n});\n\nexport const QuestionsProvider: React.FC = ({ children }) => {\n  const [data, setData] = useState<QuestionInterface | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchData = useCallback(async (url: string) => {\n    setIsLoading(true);\n    try {\n      const response = await axios.get(url);\n      setData(response.data);\n      setIsLoading(false);\n    } catch (e) {\n      setError('Could not load data. Try again!');\n      setIsLoading(false);\n    }\n  }, []);\n\n  return (\n    <QuestionsContext.Provider value={{ data, isLoading, error, fetchData }}>\n      {children}\n    </QuestionsContext.Provider>\n  );\n};\n\nexport const useFetchQuestions = () => {\n  const questionsContext = useContext(QuestionsContext);\n\n  if (!questionsContext) {\n    throw Error('useFetchQuestions needs to be used inside QuestionsContext');\n  }\n\n  return questionsContext;\n};\n","import { useFetchQuestions } from 'hooks/useFetchQuestions';\nimport React, { useState } from 'react';\nimport { ScoreContextInterface } from 'types';\n\nexport const ScoreContext = React.createContext<ScoreContextInterface>({\n  score: 0,\n  handleScore: (wrongAnswers: number, goodAnswers: number) => {},\n});\n\nexport const ScoreProvider: React.FC = ({ children }) => {\n  const [score, setScore] = useState<number>(0);\n  const { data } = useFetchQuestions();\n\n  const handleScore = (wrongAnswers: number, goodAnswers: number) => {\n    const plusScore = goodAnswers * 2;\n    const minusScore = wrongAnswers + data!.good_words.length - goodAnswers;\n\n    const score = plusScore - minusScore;\n    setScore(score);\n  };\n\n  return (\n    <ScoreContext.Provider value={{ score, handleScore }}>\n      {children}\n    </ScoreContext.Provider>\n  );\n};\n","import React, { useState } from 'react';\nimport { UsernameContextInterface } from 'types';\n\nexport const UsernameContext = React.createContext<UsernameContextInterface>({\n  username: '',\n  setUsername: () => {},\n});\n\nexport const UsernameProvider: React.FC = ({ children }) => {\n  const [username, setUsername] = useState('');\n\n  return (\n    <UsernameContext.Provider value={{ username, setUsername }}>\n      {children}\n    </UsernameContext.Provider>\n  );\n};\n","import { GlobalStyles } from 'assets/styles/GlobalStyles';\nimport { Theme } from 'assets/styles/Theme';\nimport { QuestionsProvider } from 'hooks/useFetchQuestions';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { ThemeProvider } from 'styled-components';\n\nimport { ScoreProvider } from './ScoreProvider';\nimport { UsernameProvider } from './UsernameProvider';\n\nconst AllProviders: React.FC = ({ children }) => {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <ThemeProvider theme={Theme}>\n        <GlobalStyles />\n        <UsernameProvider>\n          <QuestionsProvider>\n            <ScoreProvider>{children}</ScoreProvider>\n          </QuestionsProvider>\n        </UsernameProvider>\n      </ThemeProvider>\n    </Router>\n  );\n};\n\nexport default AllProviders;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import styled from 'styled-components';\n\nexport const CenteringWrapper = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 1rem;\n`;\n","import styled from 'styled-components';\n\nexport const Header = styled.h1`\n  font-size: 3.5rem;\n  text-align: center;\n  margin-bottom: 2rem;\n`;\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  width: 10rem;\n  height: 4rem;\n  font-weight: ${({ theme }) => theme.fontWeight.bold};\n  background-color: ${({ theme }) => theme.colors.white};\n  border: 2px solid ${({ theme }) => theme.colors.blue};\n  border-radius: 0.5rem;\n  cursor: pointer;\n  transition: all 0.3s ease-in-out;\n  outline-color: ${({ theme }) => theme.colors.blue};\n  font-size: 1.6rem;\n\n  &:disabled {\n    color: ${({ theme }) => theme.colors.grey};\n    border-color: ${({ theme }) => theme.colors.grey};\n    cursor: auto;\n  }\n\n  &[disabled]:hover {\n    background-color: ${({ theme }) => theme.colors.white};\n    color: ${({ theme }) => theme.colors.grey};\n  }\n\n  &:hover {\n    color: ${({ theme }) => theme.colors.white};\n    background-color: ${({ theme }) => theme.colors.blue};\n  }\n`;\n","import { Button } from 'components/atoms/Button/Button';\nimport styled from 'styled-components';\n\nexport const StyledButton = styled(Button)`\n  width: 15rem;\n  height: 5.5rem;\n  margin-top: 1rem;\n`;\n","import { useHistory } from 'react-router-dom';\n\nimport { StyledButton } from './GameViewButtons.styles';\n\ninterface Props {\n  answersChecked: boolean;\n  checkAnswersHandler: () => void;\n}\n\nconst GameViewButtons: React.FC<Props> = ({\n  answersChecked,\n  checkAnswersHandler,\n}) => {\n  const { push } = useHistory();\n\n  return (\n    <>\n      {answersChecked ? (\n        <StyledButton onClick={() => push('/score')}>Finish Game</StyledButton>\n      ) : (\n        <StyledButton onClick={checkAnswersHandler}>Check answers</StyledButton>\n      )}\n    </>\n  );\n};\n\nexport default GameViewButtons;\n","export const randomNumber = (number: number) =>\n  Math.round(Math.random() * number);\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  width: 100%;\n  list-style: none;\n`;\n\nexport const Wrapper = styled.div<{\n  isWrongAnswer: boolean;\n  isGoodAnswer: boolean;\n  answersChecked: boolean;\n  randomGridColumn: number;\n  randomGridRow: number;\n}>`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  grid-column: auto;\n\n  @media (min-width: 768px) {\n    grid-column: ${({ randomGridColumn }) => randomGridColumn};\n    grid-row: ${({ randomGridRow }) => randomGridRow};\n  }\n\n  & button:disabled {\n    color: ${({ theme, isGoodAnswer, isWrongAnswer }) => {\n      if (isGoodAnswer) {\n        return 'green';\n      } else if (isWrongAnswer) {\n        return 'red';\n      } else {\n        return theme.colors.grey;\n      }\n    }};\n    cursor: default;\n  }\n\n  & p {\n    font-size: 1.2rem;\n    color: ${({ isGoodAnswer }) => (isGoodAnswer ? 'green' : 'red')};\n  }\n`;\n\nexport const ListItemButton = styled.button<{\n  isChecked: boolean;\n}>`\n  font-size: 1.6rem;\n  width: 100%;\n  border: none;\n  padding: 1rem;\n  background-color: ${({ theme }) => theme.colors.background};\n  color: ${({ theme, isChecked }) =>\n    isChecked ? theme.colors.black : theme.colors.grey};\n  cursor: pointer;\n`;\n","import { randomNumber } from 'helpers/randomNumber';\nimport { useEffect, useState } from 'react';\n\nimport { ListItem, ListItemButton, Wrapper } from './ListItem.styles';\n\ninterface Props {\n  word: string;\n  clickHandler: (word: string) => void;\n  isChecked: (clickedItem: string) => string | undefined;\n  isGoodAnswer: string | undefined;\n  isWrongAnswer: string | undefined;\n  answersChecked: boolean;\n}\n\nconst ListItemComponent: React.FC<Props> = ({\n  clickHandler,\n  isChecked,\n  word,\n  isGoodAnswer,\n  isWrongAnswer,\n  answersChecked,\n}) => {\n  const [gridColumn, setGridColumn] = useState<number>(0);\n  const [gridRow, setGridRow] = useState<number>(0);\n\n  useEffect(() => {\n    setGridColumn(randomNumber(12));\n    setGridRow(randomNumber(12));\n  }, []);\n\n  return (\n    <Wrapper\n      randomGridRow={gridColumn}\n      randomGridColumn={gridRow}\n      answersChecked={answersChecked}\n      isGoodAnswer={!!isGoodAnswer}\n      isWrongAnswer={!!isWrongAnswer}\n    >\n      {(answersChecked && isWrongAnswer) || (answersChecked && isGoodAnswer) ? (\n        <p>{isGoodAnswer ? 'Good' : 'Bad'}</p>\n      ) : null}\n      <ListItem>\n        <ListItemButton\n          isChecked={isChecked(word) ? true : false}\n          disabled={answersChecked ? true : false}\n          onClick={() => clickHandler(word)}\n        >\n          {word}\n        </ListItemButton>\n      </ListItem>\n    </Wrapper>\n  );\n};\n\nexport default ListItemComponent;\n","import styled from 'styled-components';\n\nexport const GameWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  margin-bottom: 1rem;\n  border: 2px solid ${({ theme }) => theme.colors.black};\n  border-radius: 0.5rem;\n\n  @media (min-width: 768px) {\n    width: 85rem;\n    height: 55rem;\n  }\n`;\n\nexport const List = styled.ul`\n  height: 100%;\n  display: grid;\n  grid-gap: 0.5rem;\n  grid-template-columns: 1fr 1fr;\n\n  @media (min-width: 768px) {\n    grid-template-columns: repeat(12, 1fr);\n    grid-template-rows: repeat(12, 1fr);\n  }\n`;\n","import { CenteringWrapper } from 'components/atoms/CenteringWrapper/CenteringWrapper';\nimport { Header } from 'components/atoms/Header/Header';\nimport GameViewButtons from 'components/molecules/GameViewButtons/GameViewButtons';\nimport ListItem from 'components/molecules/ListItem/ListItem';\nimport { useFetchQuestions } from 'hooks/useFetchQuestions';\nimport { ScoreContext } from 'providers/ScoreProvider';\nimport { useContext, useEffect, useState } from 'react';\n\nimport { GameWrapper, List } from './GameView.styles';\n\nconst GameView = () => {\n  const { handleScore } = useContext(ScoreContext);\n  const { data, error, fetchData, isLoading } = useFetchQuestions();\n\n  const [checkedItems, setCheckedItems] = useState<string[]>([]);\n  const [wrongAnswers, setWrongAnswers] = useState<string[]>([]);\n  const [goodAnswers, setGoodAnswers] = useState<string[]>([]);\n  const [answersChecked, setAnswersChecked] = useState(false);\n\n  const isChecked = (clickedItem: string) => {\n    return checkedItems.find((name) => name === clickedItem);\n  };\n\n  const clickListItemHandler = (item: string) => {\n    const isCheckedAnswer = isChecked(item);\n\n    if (!!isCheckedAnswer) {\n      const newCheckedItems = checkedItems.filter((word) => word !== item);\n      const newGoodAnswers = goodAnswers.filter((word) => word !== item);\n      const newWrongAnswers = wrongAnswers.filter((word) => word !== item);\n      setCheckedItems(newCheckedItems);\n      setGoodAnswers(newGoodAnswers);\n      setWrongAnswers(newWrongAnswers);\n    } else {\n      setCheckedItems([...checkedItems, item]);\n    }\n\n    const correctAnswer = data!.good_words.find((word) => word === item);\n\n    if (correctAnswer && !isCheckedAnswer) {\n      setGoodAnswers([...goodAnswers, correctAnswer]);\n    } else if (!isCheckedAnswer) {\n      setWrongAnswers([...wrongAnswers, item]);\n    }\n  };\n\n  const isGoodAnswer = (item: string) => {\n    return goodAnswers.find((word) => word === item);\n  };\n\n  const isWrongAnswer = (item: string) => {\n    return wrongAnswers.find((word) => word === item);\n  };\n\n  const checkAnswersHandler = () => {\n    handleScore(wrongAnswers.length, goodAnswers.length);\n    setAnswersChecked(true);\n  };\n\n  useEffect(() => {\n    fetchData('/questions');\n  }, [fetchData]);\n\n  if (error) {\n    return (\n      <CenteringWrapper>\n        <Header>{error}</Header>\n      </CenteringWrapper>\n    );\n  }\n\n  return (\n    <CenteringWrapper>\n      {isLoading ? <h3>loading</h3> : null}\n      {!isLoading && data ? (\n        <>\n          <Header>{data.question}</Header>\n          <GameWrapper>\n            <List>\n              {data.all_words.map((word) => (\n                <ListItem\n                  key={word}\n                  clickHandler={clickListItemHandler}\n                  isChecked={isChecked}\n                  isGoodAnswer={isGoodAnswer(word)}\n                  isWrongAnswer={isWrongAnswer(word)}\n                  answersChecked={answersChecked}\n                  word={word}\n                />\n              ))}\n            </List>\n          </GameWrapper>\n\n          <GameViewButtons\n            answersChecked={answersChecked}\n            checkAnswersHandler={checkAnswersHandler}\n          />\n        </>\n      ) : null}\n    </CenteringWrapper>\n  );\n};\n\nexport default GameView;\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StyledLink = styled(Link)`\n  font-size: 2.5rem;\n  color: ${({ theme }) => theme.colors.blue};\n  text-decoration-color: ${({ theme }) => theme.colors.grey};\n  transition: all 0.3s ease-in-out;\n\n  &:hover {\n    color: ${({ theme }) => theme.colors.grey};\n    text-decoration-color: ${({ theme }) => theme.colors.blue};\n  }\n`;\n","import { CenteringWrapper } from 'components/atoms/CenteringWrapper/CenteringWrapper';\nimport { Header } from 'components/atoms/Header/Header';\n\nimport { StyledLink } from './PageNotFound.styles';\n\nconst PageNotFound = () => {\n  return (\n    <CenteringWrapper>\n      <Header>Page not found</Header>\n      <StyledLink to='/'>Home Page</StyledLink>\n    </CenteringWrapper>\n  );\n};\n\nexport default PageNotFound;\n","import { CenteringWrapper } from 'components/atoms/CenteringWrapper/CenteringWrapper';\nimport { Header } from 'components/atoms/Header/Header';\nimport { ScoreContext } from 'providers/ScoreProvider';\nimport { UsernameContext } from 'providers/UsernameProvider';\nimport { useContext } from 'react';\nimport styled from 'styled-components';\n\nconst ScoreView = () => {\n  const { username } = useContext(UsernameContext);\n  const { score } = useContext(ScoreContext);\n\n  return (\n    <CenteringWrapper>\n      <Header>\n        Congratulations, <Span>{username}</Span>!\n      </Header>\n      <Header as='h2'>Your score is:</Header>\n      <Span>{score}</Span>\n    </CenteringWrapper>\n  );\n};\n\nexport const Span = styled.span`\n  font-size: 3.5rem;\n  color: ${({ theme }) => theme.colors.blue};\n  font-weight: ${({ theme }) => theme.fontWeight.bold};\n`;\n\nexport default ScoreView;\n","import styled from 'styled-components';\n\nexport const FormWrapper = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n","import styled from 'styled-components';\n\nexport const InputTip = styled.p`\n  margin-bottom: 2rem;\n  font-size: 1.2rem;\n  font-weight: ${({ theme }) => theme.fontWeight.bold};\n  color: ${({ theme }) => theme.colors.grey};\n  cursor: default;\n`;\n","import styled from 'styled-components';\n\nexport const StyledInput = styled.input`\n  width: 30rem;\n  padding: 1.5rem 1rem;\n  margin: 2rem auto;\n  font-size: 1.6rem;\n  text-align: center;\n  border: 2px solid ${({ theme }) => theme.colors.blue};\n  background-color: ${({ theme }) => theme.colors.white};\n  border-radius: 0.5rem;\n  outline-color: ${({ theme }) => theme.colors.blue};\n`;\n","import { StyledInput } from './Input.styles';\n\ninterface Props {\n  type: string;\n  placeholder: string;\n  value: string;\n  inputHandler: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst Input: React.FC<Props> = ({\n  inputHandler,\n  placeholder,\n  type = 'text',\n  value,\n}) => {\n  return (\n    <StyledInput\n      type={type}\n      placeholder={placeholder}\n      value={value}\n      onChange={inputHandler}\n    />\n  );\n};\n\nexport default Input;\n","import { Button } from 'components/atoms/Button/Button';\nimport { FormWrapper } from 'components/atoms/FormWrapper/FormWrapper';\nimport { InputTip } from 'components/atoms/InputTip/InputTip';\nimport Input from 'components/molecules/Input/Input';\n\ninterface Props {\n  formHandler: React.FormEventHandler<HTMLFormElement>;\n  value: string;\n  inputHandler: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst Form: React.FC<Props> = ({ formHandler, inputHandler, value }) => {\n  return (\n    <FormWrapper onSubmit={formHandler}>\n      <Input\n        type='text'\n        placeholder='Enter your nickname there...'\n        value={value}\n        inputHandler={inputHandler}\n      />\n      {!value ? <InputTip>You have to provide your nickname</InputTip> : null}\n      <Button type='submit' disabled={!value ? true : false}>\n        Play\n      </Button>\n    </FormWrapper>\n  );\n};\n\nexport default Form;\n","import { CenteringWrapper } from 'components/atoms/CenteringWrapper/CenteringWrapper';\nimport { Header } from 'components/atoms/Header/Header';\nimport Form from 'components/organisms/Form/Form';\nimport { UsernameContext } from 'providers/UsernameProvider';\nimport React, { useContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst UsernameView = () => {\n  const [value, setValue] = useState('');\n\n  const { push } = useHistory();\n\n  const { setUsername } = useContext(UsernameContext);\n\n  const inputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value);\n  };\n\n  const formHandler = (e: any) => {\n    e.preventDefault();\n    setUsername(value.trim());\n    push('/game');\n  };\n\n  return (\n    <CenteringWrapper>\n      <Header>WordCloud Game</Header>\n      <Form\n        formHandler={formHandler}\n        inputHandler={inputHandler}\n        value={value}\n      />\n    </CenteringWrapper>\n  );\n};\n\nexport default UsernameView;\n","import { UsernameContext } from 'providers/UsernameProvider';\nimport { useContext } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport GameView from 'views/GameView/GameView';\nimport PageNotFound from 'views/PageNotFound/PageNotFound';\nimport ScoreView from 'views/scoreView/ScoreView';\nimport UsernameView from 'views/UsernameView/UsernameView';\n\nconst Routes = () => {\n  const { username } = useContext(UsernameContext);\n\n  return (\n    <Switch>\n      <Route exact path='/'>\n        <UsernameView />\n      </Route>\n      <Route path='/game'>\n        {username ? <GameView /> : <Redirect to='/' />}\n      </Route>\n      <Route path='/score'>\n        {username ? <ScoreView /> : <Redirect to='/' />}\n      </Route>\n      <Route>\n        <PageNotFound />\n      </Route>\n    </Switch>\n  );\n};\n\nexport default Routes;\n","import styled from 'styled-components';\n\nexport const PageWrapper = styled.div`\n  height: 100vh;\n  width: 100%;\n  padding-top: 2rem;\n`;\n","import { PageWrapper } from 'components/atoms/PageWrapper/PageWrapper';\n\nconst MainTemplate: React.FC = ({ children }) => {\n  return (\n    <main>\n      <PageWrapper>{children}</PageWrapper>\n    </main>\n  );\n};\n\nexport default MainTemplate;\n","import Routes from 'routes/Routes';\nimport MainTemplate from 'templates/MainTemplate';\n\nconst Root = () => {\n  return (\n    <MainTemplate>\n      <Routes />\n    </MainTemplate>\n  );\n};\n\nexport default Root;\n","import { worker } from 'mocks/browser';\nimport AllProviders from 'providers/AllProviders';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport reportWebVitals from './reportWebVitals';\nimport Root from './views/Root';\n\nworker.start().then(() =>\n  ReactDOM.render(\n    <React.StrictMode>\n      <AllProviders>\n        <Root />\n      </AllProviders>\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}